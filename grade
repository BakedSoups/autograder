#!/usr/bin/env python3

import argparse
import difflib
import os
import pathlib
import string
import subprocess
import sys
import toml


def fatal(s):
    print(s)
    sys.exit(-1)


def cmd_exec(args, wd=None, shell=False):
    # return stdout and stderr output combined
    return subprocess.run(args, timeout=30, cwd=wd, stdout=subprocess.PIPE, 
        stderr=subprocess.STDOUT, shell=shell)


def cmd_exec_rc(args, wd=None):
    proc = cmd_exec(args, wd)
    return proc.returncode


def cmd_exec_capture(args, wd=None, path=None, shell=False):
    proc = cmd_exec(args, wd, shell)
    if (path):
        # capture output written to path
        f = open(path, 'r')
        output = f.read()
        f.close()
    else:
        # capture output written to stdout
        output = proc.stdout.decode('utf-8')
    return output.rstrip('\n')


def print_green(s, e=''):
    print('\033[92m' + s + '+' + ' \033[0m', end=e, flush=True)


def print_red(s, e=''):
    print('\033[91m' + s + '-' + ' \033[0m', end=e, flush=True)


def load_toml(fname):
    with open(fname) as f:
        try:
            return toml.load(f)
        except Exception as e:
            fatal(f'{fname}: {e}')


class ProjectConfig:
    def __init__(self, d):
        self.build = d.get('build', 'make')
        self.strip_output = d.get('strip_output')

class Config:
    def __init__(self, d):
        self.action = d['action']           # required
        self.credentials = d['credentials'] # required
        self.date = d['date']               # optional
        self.digital = os.path.expanduser(d.get('digital')) # optional path to Digital directory
        self.exec_cmd = d.get('exec')       # optional
        self.local = d.get('local')         # could get students or local
        self.org = d['org']                 # required
        self.project = d['project']         # required
        self.project_cfg = None             # comes from project toml
        self.ioprint = d['ioprint']         # optional
        self.testspath = os.path.expanduser(d.get('testspath')) # required
        self.project_tests = os.path.join(self.testspath, self.project)        
        self.students = d.get('students')   # could get students or local
        self.test_name = d['name']          # optional
        self.verbose = d['verbose']         # optional, defaults to False
        self.verbose2 = d['verbose2']       # optional
        if self.verbose2:
            self.verbose = True

    def validate_args(d):
        if d['project'] is None:
            fatal('project not given in config or command line')
        if d['action'] == 'exec' and d.get('exec') is None:
            fatal('-e \'cmd\' not given with exec')


    def parse_args(fname):
        # Check to see if ~/.config/grade/config.toml exits
        # Create if it does not exit
        # Create path if needed
        home = str(pathlib.Path.home())
        config_path = home + '/.config/grade'
        config_file_path = pathlib.Path(config_path + '/config.toml')
        if not config_file_path.exists():
            pathlib.Path(config_path).mkdir(parents=True, exist_ok=True)
            with open(config_file_path, 'w') as f:
                f.write('# Default config.toml\n')
                f.write('# credentials = "ssh"\n')
                f.write('# credentials = "http"\n')                
                f.write('# digital = "path_to_Digital"\n')
                f.write('# org = "github_org_name"\n')
                f.write('# project = "default_project_name"\n')
                f.write('# students = [\n')
                f.write('#     "github_id_1",\n')
                f.write('#     "github_id_2",\n')
                f.write('#     "github_id_3"\n')
                f.write('# ]\n')
                f.write('# testspath = "path_to_tests"\n')
                f.write('# verbose = false\n')
                f.write('# verbose = true\n')

        # .toml file contains defaults. Command line args can override
        defaults = load_toml(config_file_path)
        p = argparse.ArgumentParser()
        p.add_argument('action', type=str, choices=['class', 'clone', 'exec', 'names', 'test'])
        p.add_argument('-c', '--credentials', choices=['https', 'ssh'], help='Github auth method',
            default=defaults.get('credentials', 'ssh'))
        p.add_argument('-d', '--digital', help='Path to digital.jar',
            default=defaults.get('digital', '~/Digital/Digital.jar'))
        p.add_argument('-da', '--date', help='Checkout repo as of YYYY-MM-DD at 00:00:00',
            default=defaults.get('date', None))
        p.add_argument('-e', '--exec', help='Execute command in each repo (git pull or make clean)',
            default=defaults.get('exec', None))
        p.add_argument('-l', '--local', help='Local directory to test',
            default=defaults.get('local', '.'))
        p.add_argument('-n', '--name', help='Run test case with this name',
            default=defaults.get('test_name', None))
        p.add_argument('-o', '--org', help='Github Classroom Organization',
            default=defaults.get('org', None))
        p.add_argument('-p', '--project', help='Project name',
            default=defaults.get('project', None))
        p.add_argument('-i', '--ioprint', action='store_true', help='Print input and output',
            default=defaults.get('print', False))
        p.add_argument('-s', '--students', nargs='+', type=str, help='Student Github IDs',
            default=defaults.get('students', None))
        p.add_argument('-t', '--testspath', help='Path to tests',
            default=defaults.get('testspath', '~/tests'))
        p.add_argument('-v', '--verbose', action='store_true', help='Print actual and expected output when they don\'t match',
            default=defaults.get('verbose', False))
        p.add_argument('-vv', '--verbose2', action='store_true', help='Print actual and expected output whether they match or not',
            default=defaults.get('verbose2', False))
        
        d = vars(p.parse_args())
        Config.validate_args(d)
        return d


class TestCase:
    trans_table = str.maketrans(dict.fromkeys(string.whitespace))
    def __init__(self, cfg, d):
        self.validate(d)
        self.cmd_line = []
        for i in d['input']:
            if '$project_tests' in i:
                param = i.replace('$project_tests', cfg.project_tests)
            elif '$project' in i:
                param = i.replace('$project', cfg.project)
            elif '$digital' in i:
                param = i.replace('$digital', cfg.digital)
            else:
                param = i
            self.cmd_line.append(param)
        self.expected = d.get('expected', None)
        self.name = d.get('name', None)
        self.output = d.get('output', 'stdout')
        self.rubric = d.get('rubric', None)
        self.strip_output = cfg.project_cfg.strip_output
        self.verbose = cfg.verbose
        self.verbose2 = cfg.verbose2
        self.ioprint = cfg.ioprint


    def validate(self, d):
        test_name = d.get('name', 'unknown')
        if type(d.get('rubric')) is not int:
            fatal('Rubric for test \"{test_name}\" must be an integer')
        if type(d.get('input')) is not list:
            fatal(f'Input for test \"{test_name}\" must be a list')
        if type(d.get('expected')) is not str:
            fatal(f'Expected output for test \"{test_name}\" must be a string')


    def get_actual(self, local):
        try:
            if self.output == 'stdout':
                # get actual output from stdout
                act = cmd_exec_capture(self.cmd_line, local)
            else:
                # ignore stdout and get actual output from the specified file
                path = os.path.join(local, self.output)
                act = cmd_exec_capture(self.cmd_line, local, path)
        except (FileNotFoundError, subprocess.TimeoutExpired) as err:
            print(f'{self.name}: {err}')
            return ''

        if self.strip_output:
            act = act.replace(self.strip_output, '')
        return act

    def prepare_cmd_line(self, cmd_line):
        cmd_line_prepared = [cmd_line[0]]
        for arg in cmd_line[1:]:
            if ' ' in arg:
                arg = '"' + arg + '"'
            cmd_line_prepared.append(arg)
        return cmd_line_prepared

    def make_lines(self, text):
        text_lines = []
        for line in text.split('\n'):
            text_lines.append(line + '\n')
        return text_lines
        
    def match_expected(self, actual):
        # Strip trailing whitespace - expected has extra newline
        exp = self.expected.rstrip()
        act = actual.rstrip()

        cmd_line = self.prepare_cmd_line(self.cmd_line)
        cmd_line_str = ' '.join(cmd_line)

        if self.verbose2:
            print(f"===[{self.name}]===expected\n$ {cmd_line_str}\n{exp}")
            print()
            print(f"===[{self.name}]===actual\n$ {cmd_line_str}\n{act}")
            print()
        if self.verbose and (act != exp):
            print(f"===[{self.name}]===diff\n$ {cmd_line_str}")
            exp_lines = self.make_lines(exp)
            act_lines = self.make_lines(act)
            diff = difflib.context_diff(exp_lines, act_lines, fromfile='expected', tofile='actual')
            for line in diff:
                print(line, end='')
            print()
            
        if self.ioprint:
            print(f"$ {cmd_line_str}\n{actual}")
        return act == exp

def load_tests(cfg):
    tests_file = os.path.join(cfg.project_tests, cfg.project + '.toml', )
    toml_input = load_toml(tests_file)
    cfg.project_cfg = ProjectConfig(toml_input.get('project', {}))
    test_cases = []
    for t in toml_input['tests']:
        test_cases.append(TestCase(cfg, t))

    return test_cases

def print_tests(tests):
    for tc in tests:
        print(tc.name)

class Repo:
    def __init__(self, cfg, **kwargs):
        # calculate the local and remote for this repo
        student = kwargs.get('student')
        if student:
            pg = cfg.project + '-' + student
            self.local = os.path.join('github.com', cfg.org, pg)
            # set up remote repo for clone
            if cfg.credentials == 'https':
                self.remote = 'https://github.com/'
            elif cfg.credentials == 'ssh':
                self.remote = 'git@github.com:/'
            self.remote += cfg.org + '/' + pg + '.git'
        # allow -l/--local to override the local directory calculated above
        if kwargs.get('local'):
            self.local = kwargs['local'].rstrip('/')
        self.label = self.local.split('/')[-1]
        self.results = []
        self.verbose = cfg.verbose
        self.build_plan = cfg.project_cfg.build
        self.date = cfg.date

    def build(self):
        if self.build_plan == 'none':
            return 0
        elif self.build_plan == 'make':
            return cmd_exec_rc(['make', '-C', self.local])
        else:
            fatal(f'Unknown build plan: \"{self.build_plan}\"')


    def get_commit_hash(self, branch):
        deadline = '\"' + self.date + ' 00:00:00' + '\"'
        cmd = ['git', 'rev-list', '-n', '1', '--first-parent', '--before', deadline, branch]
        return cmd_exec_capture(cmd, wd=self.local)

    def clone(self):
        if self.remote is None:
            raise Exception(self.label + ' no remote to clone')
        if os.path.isdir(self.local):
            print('Already exists: ' + self.local)
            return 0
        name = self.local + ' '
        if self.date:
            print(name, end='')
        else:
            print(name)
        cmd_exec_rc(['git', 'clone', self.remote, self.local])
        if self.date:
            commit_hash = self.get_commit_hash('master') or self.get_commit_hash('main')
            print(commit_hash)
            cmd_exec_rc(['git', 'checkout', commit_hash], wd=self.local)

    def exec_cmd(self, cmd):
        print(self.local, end = ': ')
        output = cmd_exec_capture(cmd, wd=self.local, shell=True)
        print(output)

    def test_one(self, test_case):
        score = 0
        actual = test_case.get_actual(self.local)
        if test_case.match_expected(actual):
            score = test_case.rubric

        # record score for later printing
        result = {'test': test_case, 'score': score}
        if self.verbose:
            # or print now if testing is slow, like in Digital
            self.print_one_result(result)
        self.results.append(result)


    def test(self, test_cases, test_name):
        if test_name is not None:
            for tc in test_cases:
                if tc.name == test_name:
                    self.test_one(tc)
        else:
            for tc in test_cases:
                self.test_one(tc)

    def print_one_result(self, res):
        if res['score'] == 0:
            print_red(res['test'].name)
        else:
            print_green(res['test'].name)

    def print_results(self, longest):
        print(self.label, end='')
        for n in range(longest - len(self.label)):
            print(' ', end='')

        earned = 0
        avail = 0
        for r in self.results:
            rubric = r['test'].rubric
            avail += rubric
            if r['score'] != 0:
                earned += rubric
            self.print_one_result(r)
        print(f"{earned}/{avail}")

    def get_score(self):
        score = 0;
        for r in self.results:
            score += r['score'];
        return score


def print_score_frequency(repos, test_cases):
    avail = 0  # points available
    for tc in test_cases:
        avail += tc.rubric

    repos.sort(key=Repo.get_score, reverse=True)
    freqs = {}  # key: score, value: frequency
    for repo in repos:
        score = repo.get_score()
        if not score in freqs:
            freqs[score] = 0
        freqs[score] += 1

    print("\nScore frequency")
    for score, freq in freqs.items():
        pct = "{:.1f}".format(freq / len(repos) * 100)
        print(f"{score}/{avail}: {freq}  ({pct}%)")


def main():
    args = Config.parse_args('config.toml')
    cfg = Config(args)
    test_cases = load_tests(cfg)

    if cfg.action == 'names':
        print_tests(test_cases)
        return 0;

    # Build list of repos to run, either from local or list of students
    repos = []
    if cfg.action == 'test':
        # One local repo
        if not os.path.isdir(cfg.local):
            raise Exception(cfg.local + ' is not a directory')
        repo = Repo(cfg, local=cfg.local)
        repos.append(repo)
    elif cfg.students:
        # Make repo list from student list
        for s in cfg.students:
            repo = Repo(cfg, student=s)
            repos.append(repo)
    else:
        print("Must either 'test' one repo, or give a list of students to 'clone', 'pull' or 'class'")
        return -1

    # Calc column width for justified printing
    longest = 0;
    for r in repos:
        l = len(r.label)
        if l > longest:
            longest = l
    longest += 1

    # Run the specified actions for all of the repos
    for repo in repos:
        try:
            if cfg.action == 'clone':
                repo.clone()
            elif cfg.action == 'exec':
                repo.exec_cmd(cfg.exec_cmd)
            elif cfg.action == 'class' or cfg.action == 'test':
                repo.build()
                repo.test(test_cases, cfg.test_name)
                repo.print_results(longest)
        except Exception as e:
            print_red(repo.label + ' ' + str(e), '\n')
            continue

    # Summary by score frequency
    if cfg.action == 'class':
        print_score_frequency(repos, test_cases)

if __name__ == "__main__":
    main()
